<?xml version="1.0"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
    <metadata>
        <!-- The identifier that must be unique within the hosting gallery -->
        <id>Behavioral.Automation</id>

        <!-- The package version number that is used when resolving dependencies -->
        <version>1.0.0</version>

        <!-- Authors contain text that appears directly on the gallery -->
        <authors>victorvoronin</authors>

        <!-- 
            Owners are typically nuget.org identities that allow gallery
            users to easily find other packages by the same owners.  
        -->
        <owners>victorvoronin</owners>

        <!-- Project URL provides a link for the gallery -->
        <projectUrl>https://github.com/victorvoronin</projectUrl>

        <!-- License information is displayed on the gallery -->
        <license type="expression">MIT</license>
        
        <!-- The icon is used in Visual Studio's package manager UI -->
        <iconUrl>ttps://www.quantori.com/_nuxt/img/6201dec.png</iconUrl>

        <!-- 
            If true, this value prompts the user to accept the license when
            installing the package. 
        -->
        <requireLicenseAcceptance>false</requireLicenseAcceptance>

        <!-- Any details about this particular release -->
        <releaseNotes>Initial version</releaseNotes>

        <!-- 
            The description can be used in package manager UI. Note that the
            nuget.org gallery uses information you add in the portal. 
        -->
        <description>
            Platform design is based on strong and well-defined borderline between procedural test cases 
            structure and object-oriented code-behind.

            We think that test cases implementation approach (inside BDD paradigm) is literaly the same 
            across different applications. That means that we can define and reuse grammar structures across 
            different application domains. On top of this, while talking about single page web applications, 
            we may take into account that atomic controls behavior is also the same across different domains.

            The whole automation code is divided into the following parts:
            - Feature files
            - Bindings
            - Wrappers
            - Infrastructure bindings
            - UI structure descriptive code
            - Supportive code
        </description>

        <!-- Copyright information -->
        <copyright>Copyright Â©2020 Quantori Inc.</copyright>

        <!-- Tags appear in the gallery and can be used for tag searches -->
        <tags>BDD Automation</tags>

        <!-- Dependencies are automatically installed when the package is installed -->
        <dependencies>
            <dependency id="Newtonsoft.Json" version="9.0" />
        </dependencies>
    </metadata>

    <!-- A readme.txt to display when the package is installed -->
    <files>
        <file src="readme.txt" target="" />
    </files>
</package>
